import requests
from bs4 import BeautifulSoup
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import string

# Download NLTK data (if not already downloaded)
nltk.download('punkt')
nltk.download('stopwords')

# Step 1: Web Scraping
def fetch_reviews(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    reviews = []
    for review in soup.find_all('div', class_='review'):
        text = review.get_text()
        reviews.append(text)
    return reviews

# Example URL (replace with actual URL)
url = 'https://www.example.com/product-reviews'
reviews = fetch_reviews(url)

# Step 2: Text Pre-Processing
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    tokens = word_tokenize(text)  # Tokenize
    tokens = [word for word in tokens if word not in stopwords.words('english')]  # Remove stop words
    tokens = [word for word in tokens if word.isalnum()]  # Remove punctuation
    stemmer = PorterStemmer()
    tokens = [stemmer.stem(word) for word in tokens]  # Stemming
    return ' '.join(tokens)

preprocessed_reviews = [preprocess_text(review) for review in reviews]

# Step 3: Create Labels (Dummy labels for demonstration)
# Note: In a real scenario, labels should be derived from the actual sentiment.
# Here, we assume 0 for negative and 1 for positive reviews for demonstration.
# Replace this with actual sentiment labels from your dataset.
labels = [0 if 'negative' in review.lower() else 1 for review in reviews]

# Step 4: Vectorization
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(preprocessed_reviews)
y = labels

# Step 5: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train Model
model = MultinomialNB()
model.fit(X_train, y_train)

# Step 7: Predict
y_pred = model.predict(X_test)

# Step 8: Evaluate
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print results
print(f'Accuracy: {accuracy:.4f}')
print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1 Score: {f1:.4f}')
